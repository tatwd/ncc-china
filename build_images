#!/bin/bash

pwd_dir=$PWD
build_dir="$pwd_dir/build"
services_dir_prefix="src/server/services"

identity_db="ncc.identity"
postsys_db="ncc.postsys"

function build_image() {
	docker build -t "$1" -f "$build_dir/$1/Dockerfile.release" "$build_dir/$1"
}

function build_identity_api() {
	local api_name="api_identity"
	local csproj="$services_dir_prefix/identity/api/Ncc.China.Services.Identity.Api.csproj"
	
	dotnet publish -c Release -o "$build_dir/$api_name" "$csproj"
	build_image $api_name
	#docker run --name "test_$api_name" --rm -p 5001:80 -d --link "$identity_db" "$api_name"
}

function build_postsys_api() {
	local api_name="api_postsys"
	local csproj="$services_dir_prefix/postsys/api/Ncc.China.Services.Postsys.Api.csproj"
	
	dotnet publish -c Release -o "$build_dir/$api_name" "$csproj"
	build_image $api_name
	#docker run --name "test_$api_name" --rm -p 5002:80 -d --link "$postsys_db" "$api_name"
}

function build_postsys_comment_api() {
	local api_name="api_postsys_comment"
	local proj_dir="$services_dir_prefix/postsys_comment"

	if [ ! -d "build/$api_name" ]; then
		mkdir -p "build/$api_name"
	fi

	# copy all files and dir exinclude `node_modules` dir
	ls $proj_dir \
		| grep -v "node_modules" \
		| xargs -i cp -r $proj_dir/{} $build_dir/$api_name

	build_image $api_name
}

build_identity_api \
	&& build_postsys_api \
	&& build_postsys_comment_api \ 

docker image prune